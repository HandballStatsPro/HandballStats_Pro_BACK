package com.HandballStats_Pro.handballstatspro.services;

import com.HandballStats_Pro.handballstatspro.dto.AccionDTO;
import com.HandballStats_Pro.handballstatspro.entities.Accion;
import com.HandballStats_Pro.handballstatspro.entities.Partido;
import com.HandballStats_Pro.handballstatspro.enums.*;
import com.HandballStats_Pro.handballstatspro.exceptions.ApiException;
import com.HandballStats_Pro.handballstatspro.repositories.AccionRepository;
import com.HandballStats_Pro.handballstatspro.repositories.PartidoRepository;
import com.HandballStats_Pro.handballstatspro.repositories.UsuarioRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.http.HttpStatus;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

/**
 * TEST COMPLETO DE TODOS LOS FLUJOS POSIBLES DE VALIDACI√ìN DE ACCIONES
 * 
 * Este test analiza sistem√°ticamente todos los casos posibles seg√∫n el
 * Reglamento Maestro de Validaci√≥n para `accion`.
 * 
 * Organizado por las 5 reglas principales:
 * 1. El Caso Especial de 7 Metros
 * 2. L√≥gica del Tipo de Ataque  
 * 3. L√≥gica del Evento Principal
 * 4. L√≥gica de Cambio de Posesi√≥n
 * 5. L√≥gica Secuencial
 */
@ExtendWith(MockitoExtension.class)
@DisplayName("üéØ AN√ÅLISIS COMPLETO DE FLUJOS DE VALIDACI√ìN DE ACCIONES")
public class AccionValidationFlowTest {

    @Mock
    private AccionRepository accionRepository;
    
    @Mock
    private PartidoRepository partidoRepository;
    
    @Mock
    private UsuarioRepository usuarioRepository;
    
    @Mock
    private PartidoService partidoService;
    
    @InjectMocks
    private AccionService accionService;
    
    private Partido partidoMock;
    
    @BeforeEach
    void setUp() {
        System.out.println("\nüî• ==> CONFIGURANDO TEST SETUP <== üî•");
        
        partidoMock = new Partido();
        partidoMock.setIdPartido(1);
        partidoMock.setNombreEquipoLocal("Equipo Local");
        partidoMock.setNombreEquipoVisitante("Equipo Visitante");
        
        // Configurar mocks b√°sicos
        when(partidoRepository.findById(anyInt())).thenReturn(Optional.of(partidoMock));
        when(partidoService.puedeAccederPartido(any())).thenReturn(true);
        when(accionRepository.save(any(Accion.class))).thenAnswer(invocation -> {
            Accion accion = invocation.getArgument(0);
            accion.setIdAccion(1);
            return accion;
        });
        
        System.out.println("‚úÖ Setup completado");
    }
    
    /**
     * REGLA 1: EL CASO ESPECIAL DE 7 METROS
     */
    @Nested
    @DisplayName("üìã REGLA 1: Caso Especial de 7 Metros")
    class Regla1_CasoEspecial7Metros {
        
        @Test
        @DisplayName("‚úÖ Caso v√°lido: 7m con detalle_finalizacion='7m' y tipo_ataque='Posicional'")
        void test_7m_caso_valido() {
            System.out.println("\nüéØ TEST: 7m caso v√°lido");
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion._7m);
            accion.setDetalleFinalizacion(DetalleFinalizacion._7m);
            accion.setTipoAtaque(TipoAtaque.Posicional);
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Caso 7m v√°lido pas√≥ todas las validaciones");
        }
        
        @Test
        @DisplayName("‚ùå Error: 7m con detalle_finalizacion incorrecto")
        void test_7m_detalle_incorrecto() {
            System.out.println("\nüéØ TEST: 7m con detalle incorrecto");
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion._7m);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote); // ‚ùå Incorrecto
            accion.setTipoAtaque(TipoAtaque.Posicional);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_7M_DETAIL", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚ùå Error: 7m con tipo_ataque incorrecto")
        void test_7m_tipo_ataque_incorrecto() {
            System.out.println("\nüéØ TEST: 7m con tipo_ataque incorrecto");
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion._7m);
            accion.setDetalleFinalizacion(DetalleFinalizacion._7m);
            accion.setTipoAtaque(TipoAtaque.Contraataque); // ‚ùå Incorrecto
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_7M_TYPE", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚ùå Error: detalle_finalizacion='7m' sin origen_accion='7m'")
        void test_detalle_7m_sin_origen_7m() {
            System.out.println("\nüéØ TEST: detalle_finalizacion='7m' sin origen='7m'");
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Juego_Continuado); // ‚ùå Incorrecto
            accion.setDetalleFinalizacion(DetalleFinalizacion._7m);
            accion.setTipoAtaque(TipoAtaque.Posicional);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_7M_ORIGIN", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
    }
    
    /**
     * REGLA 2: L√ìGICA DEL TIPO DE ATAQUE
     */
    @Nested
    @DisplayName("üìã REGLA 2: L√≥gica del Tipo de Ataque")
    class Regla2_TipoAtaque {
        
        @Test
        @DisplayName("‚úÖ Contraataque v√°lido con Contragol")
        void test_contraataque_contragol_valido() {
            System.out.println("\nüéØ TEST: Contraataque con Contragol");
            
            AccionDTO accion = crearAccionBase();
            accion.setTipoAtaque(TipoAtaque.Contraataque);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Contragol);
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Contraataque con Contragol v√°lido");
        }
        
        @Test
        @DisplayName("‚úÖ Contraataque v√°lido con 1¬™ oleada")
        void test_contraataque_1a_oleada_valido() {
            System.out.println("\nüéØ TEST: Contraataque con 1¬™ oleada");
            
            AccionDTO accion = crearAccionBase();
            accion.setTipoAtaque(TipoAtaque.Contraataque);
            accion.setDetalleFinalizacion(DetalleFinalizacion._1a_oleada);
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Contraataque con 1¬™ oleada v√°lido");
        }
        
        @Test
        @DisplayName("‚ùå Error: Contraataque con detalle posicional")
        void test_contraataque_detalle_posicional_error() {
            System.out.println("\nüéØ TEST: Contraataque con detalle posicional");
            
            AccionDTO accion = crearAccionBase();
            accion.setTipoAtaque(TipoAtaque.Contraataque);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote); // ‚ùå Incorrecto para contraataque
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_COUNTERATTACK_DETAIL", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ Posicional v√°lido con Pivote")
        void test_posicional_pivote_valido() {
            System.out.println("\nüéØ TEST: Posicional con Pivote");
            
            AccionDTO accion = crearAccionBase();
            accion.setTipoAtaque(TipoAtaque.Posicional);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Posicional con Pivote v√°lido");
        }
        
        @Test
        @DisplayName("‚ùå Error: Posicional con detalle de contraataque")
        void test_posicional_detalle_contraataque_error() {
            System.out.println("\nüéØ TEST: Posicional con detalle de contraataque");
            
            AccionDTO accion = crearAccionBase();
            accion.setTipoAtaque(TipoAtaque.Posicional);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Contragol); // ‚ùå Incorrecto para posicional
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_POSITIONAL_DETAIL", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
    }
    
    /**
     * REGLA 3: L√ìGICA DEL EVENTO PRINCIPAL
     */
    @Nested
    @DisplayName("üìã REGLA 3: L√≥gica del Evento Principal")
    class Regla3_EventoPrincipal {
        
        @Test
        @DisplayName("‚úÖ Gol v√°lido con campos obligatorios")
        void test_gol_valido() {
            System.out.println("\nüéØ TEST: Gol v√°lido");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(null); // Debe ser nulo para gol
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Gol v√°lido pas√≥ validaci√≥n");
        }
        
        @Test
        @DisplayName("‚ùå Error: Gol sin detalle_finalizacion")
        void test_gol_sin_detalle_finalizacion() {
            System.out.println("\nüéØ TEST: Gol sin detalle_finalizacion");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(null); // ‚ùå Obligatorio para gol
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(null);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("GOAL_REQUIRED_FIELDS", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚ùå Error: Gol con detalle_evento no nulo")
        void test_gol_con_detalle_evento() {
            System.out.println("\nüéØ TEST: Gol con detalle_evento");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Parada_Portero); // ‚ùå Debe ser nulo para gol
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("GOAL_INVALID_DETAIL", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ Lanzamiento_Parado v√°lido con Parada_Portero")
        void test_lanzamiento_parado_parada_portero_valido() {
            System.out.println("\nüéØ TEST: Lanzamiento_Parado con Parada_Portero");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Parado);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Parada_Portero);
            accion.setCambioPosesion(false); // No cambia posesi√≥n por parada
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Lanzamiento_Parado con Parada_Portero v√°lido");
        }
        
        @Test
        @DisplayName("‚úÖ Lanzamiento_Parado v√°lido con Bloqueo_Defensor")
        void test_lanzamiento_parado_bloqueo_defensor_valido() {
            System.out.println("\nüéØ TEST: Lanzamiento_Parado con Bloqueo_Defensor");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Parado);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Extremos);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion.setDetalleEvento(DetalleEvento.Bloqueo_Defensor);
            accion.setCambioPosesion(false); // No cambia posesi√≥n por bloqueo
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Lanzamiento_Parado con Bloqueo_Defensor v√°lido");
        }
        
        @Test
        @DisplayName("‚ùå Error: Lanzamiento_Parado con detalle_evento inv√°lido")
        void test_lanzamiento_parado_detalle_evento_invalido() {
            System.out.println("\nüéØ TEST: Lanzamiento_Parado con detalle_evento inv√°lido");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Parado);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Palo); // ‚ùå Solo v√°lido para Lanzamiento_Fuera
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("SHOT_STOPPED_INVALID_DETAIL", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ Lanzamiento_Fuera v√°lido con Palo")
        void test_lanzamiento_fuera_palo_valido() {
            System.out.println("\nüéØ TEST: Lanzamiento_Fuera con Palo");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Fuera);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Lanzamiento_Exterior);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion.setDetalleEvento(DetalleEvento.Palo);
            accion.setCambioPosesion(false); // No cambia posesi√≥n por palo
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Lanzamiento_Fuera con Palo v√°lido");
        }
        
        @Test
        @DisplayName("‚úÖ Lanzamiento_Fuera v√°lido con Fuera_Directo")
        void test_lanzamiento_fuera_fuera_directo_valido() {
            System.out.println("\nüéØ TEST: Lanzamiento_Fuera con Fuera_Directo");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Fuera);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Penetracion);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Fuera_Directo);
            accion.setCambioPosesion(true); // S√≠ cambia posesi√≥n por fuera directo
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Lanzamiento_Fuera con Fuera_Directo v√°lido");
        }
        
        @Test
        @DisplayName("‚úÖ Perdida v√°lida con Pasos")
        void test_perdida_pasos_valido() {
            System.out.println("\nüéØ TEST: Perdida con Pasos");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Perdida);
            accion.setDetalleFinalizacion(null); // Debe ser nulo para perdida
            accion.setZonaLanzamiento(null); // Debe ser nulo para perdida
            accion.setDetalleEvento(DetalleEvento.Pasos);
            accion.setCambioPosesion(true); // S√≠ cambia posesi√≥n por perdida
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Perdida con Pasos v√°lida");
        }
        
        @Test
        @DisplayName("‚ùå Error: Perdida con campos no nulos")
        void test_perdida_campos_no_nulos_error() {
            System.out.println("\nüéØ TEST: Perdida con campos no nulos");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Perdida);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote); // ‚ùå Debe ser nulo
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro); // ‚ùå Debe ser nulo
            accion.setDetalleEvento(DetalleEvento.Pasos);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("TURNOVER_INVALID_FIELDS", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
    }
    
    /**
     * REGLA 4: L√ìGICA DE CAMBIO DE POSESI√ìN
     */
    @Nested
    @DisplayName("üìã REGLA 4: L√≥gica de Cambio de Posesi√≥n")
    class Regla4_CambioPosesion {
        
        @Test
        @DisplayName("‚úÖ Parada_Portero NO cambia posesi√≥n")
        void test_parada_portero_no_cambia_posesion() {
            System.out.println("\nüéØ TEST: Parada_Portero NO cambia posesi√≥n");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Parado);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Parada_Portero);
            accion.setCambioPosesion(false); // Correcto: NO cambia
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Parada_Portero correctamente NO cambia posesi√≥n");
        }
        
        @Test
        @DisplayName("‚ùå Error: Parada_Portero mal configurada como cambio de posesi√≥n")
        void test_parada_portero_mal_configurada() {
            System.out.println("\nüéØ TEST: Parada_Portero mal configurada");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Parado);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Parada_Portero);
            accion.setCambioPosesion(true); // ‚ùå Incorrecto: deber√≠a ser false
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_POSSESSION_CHANGE", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ Bloqueo_Defensor NO cambia posesi√≥n")
        void test_bloqueo_defensor_no_cambia_posesion() {
            System.out.println("\nüéØ TEST: Bloqueo_Defensor NO cambia posesi√≥n");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Parado);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Lanzamiento_Exterior);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion.setDetalleEvento(DetalleEvento.Bloqueo_Defensor);
            accion.setCambioPosesion(false); // Correcto: NO cambia
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Bloqueo_Defensor correctamente NO cambia posesi√≥n");
        }
        
        @Test
        @DisplayName("‚úÖ Palo NO cambia posesi√≥n")
        void test_palo_no_cambia_posesion() {
            System.out.println("\nüéØ TEST: Palo NO cambia posesi√≥n");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Fuera);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Lanzamiento_Exterior);
            accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion.setDetalleEvento(DetalleEvento.Palo);
            accion.setCambioPosesion(false); // Correcto: NO cambia
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Palo correctamente NO cambia posesi√≥n");
        }
        
        @Test
        @DisplayName("‚úÖ Gol S√ç cambia posesi√≥n")
        void test_gol_si_cambia_posesion() {
            System.out.println("\nüéØ TEST: Gol S√ç cambia posesi√≥n");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(null);
            accion.setCambioPosesion(true); // Correcto: S√ç cambia
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Gol correctamente S√ç cambia posesi√≥n");
        }
        
        @Test
        @DisplayName("‚úÖ Fuera_Directo S√ç cambia posesi√≥n")
        void test_fuera_directo_si_cambia_posesion() {
            System.out.println("\nüéØ TEST: Fuera_Directo S√ç cambia posesi√≥n");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Lanzamiento_Fuera);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Penetracion);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setDetalleEvento(DetalleEvento.Fuera_Directo);
            accion.setCambioPosesion(true); // Correcto: S√ç cambia
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Fuera_Directo correctamente S√ç cambia posesi√≥n");
        }
        
        @Test
        @DisplayName("‚úÖ Perdida S√ç cambia posesi√≥n")
        void test_perdida_si_cambia_posesion() {
            System.out.println("\nüéØ TEST: Perdida S√ç cambia posesi√≥n");
            
            AccionDTO accion = crearAccionBase();
            accion.setEvento(Evento.Perdida);
            accion.setDetalleFinalizacion(null);
            accion.setZonaLanzamiento(null);
            accion.setDetalleEvento(DetalleEvento.Robo);
            accion.setCambioPosesion(true); // Correcto: S√ç cambia
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Perdida correctamente S√ç cambia posesi√≥n");
        }
    }
    
    /**
     * REGLA 5: L√ìGICA SECUENCIAL
     */
    @Nested
    @DisplayName("üìã REGLA 5: L√≥gica Secuencial")
    class Regla5_LogicaSecuencial {
        
        @Test
        @DisplayName("‚úÖ Primera acci√≥n del partido con Juego_Continuado")
        void test_primera_accion_juego_continuado() {
            System.out.println("\nüéØ TEST: Primera acci√≥n del partido");
            
            // No hay acciones anteriores
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.empty());
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Juego_Continuado); // Correcto para primera acci√≥n
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Primera acci√≥n v√°lida con Juego_Continuado");
        }
        
        @Test
        @DisplayName("‚ùå Error: Primera acci√≥n con Rebote")
        void test_primera_accion_rebote_error() {
            System.out.println("\nüéØ TEST: Primera acci√≥n con Rebote (error)");
            
            // No hay acciones anteriores
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.empty());
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Rebote_directo); // ‚ùå Incorrecto para primera acci√≥n
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_FIRST_ACTION", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ Rebote_directo despu√©s de acci√≥n sin cambio de posesi√≥n")
        void test_rebote_directo_secuencia_valida() {
            System.out.println("\nüéØ TEST: Rebote_directo despu√©s de acci√≥n sin cambio");
            
            // Configurar acci√≥n anterior que NO cambia posesi√≥n
            Accion accionAnterior = new Accion();
            accionAnterior.setIdAccion(1);
            accionAnterior.setCambioPosesion(false); // Correcto para rebote
            accionAnterior.setEvento(Evento.Lanzamiento_Parado);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior));
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Rebote_directo);
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Rebote_directo v√°lido despu√©s de acci√≥n sin cambio de posesi√≥n");
        }
        
        @Test
        @DisplayName("‚ùå Error: Rebote_directo despu√©s de acci√≥n con cambio de posesi√≥n")
        void test_rebote_directo_secuencia_invalida() {
            System.out.println("\nüéØ TEST: Rebote_directo despu√©s de cambio de posesi√≥n (error)");
            
            // Configurar acci√≥n anterior que S√ç cambia posesi√≥n
            Accion accionAnterior = new Accion();
            accionAnterior.setIdAccion(1);
            accionAnterior.setCambioPosesion(true); // ‚ùå Incorrecto para rebote
            accionAnterior.setEvento(Evento.Gol);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior));
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Rebote_directo);
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_REBOUND_SEQUENCE", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ Juego_Continuado despu√©s de acci√≥n con cambio de posesi√≥n")
        void test_juego_continuado_secuencia_valida() {
            System.out.println("\nüéØ TEST: Juego_Continuado despu√©s de cambio de posesi√≥n");
            
            // Configurar acci√≥n anterior que S√ç cambia posesi√≥n
            Accion accionAnterior = new Accion();
            accionAnterior.setIdAccion(1);
            accionAnterior.setCambioPosesion(true); // Correcto para juego continuado
            accionAnterior.setEvento(Evento.Gol);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior));
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Juego_Continuado);
            accion.setEvento(Evento.Perdida);
            accion.setDetalleFinalizacion(null);
            accion.setZonaLanzamiento(null);
            accion.setDetalleEvento(DetalleEvento.Pasos);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ Juego_Continuado v√°lido despu√©s de cambio de posesi√≥n");
        }
        
        @Test
        @DisplayName("‚ùå Error: Juego_Continuado despu√©s de acci√≥n sin cambio de posesi√≥n")
        void test_juego_continuado_secuencia_invalida() {
            System.out.println("\nüéØ TEST: Juego_Continuado despu√©s de NO cambio (error)");
            
            // Configurar acci√≥n anterior que NO cambia posesi√≥n
            Accion accionAnterior = new Accion();
            accionAnterior.setIdAccion(1);
            accionAnterior.setCambioPosesion(false); // ‚ùå Incorrecto para juego continuado
            accionAnterior.setEvento(Evento.Lanzamiento_Parado);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior));
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion.Juego_Continuado);
            accion.setEvento(Evento.Gol);
            accion.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            
            ApiException exception = assertThrows(ApiException.class, 
                () -> accionService.crearAccion(accion));
            
            assertEquals("INVALID_CONTINUOUS_GAME_SEQUENCE", exception.getErrorCode());
            System.out.println("‚úÖ Error detectado correctamente: " + exception.getMessage());
        }
        
        @Test
        @DisplayName("‚úÖ 7m no sigue reglas secuenciales")
        void test_7m_no_sigue_reglas_secuenciales() {
            System.out.println("\nüéØ TEST: 7m exento de reglas secuenciales");
            
            // Configurar acci√≥n anterior cualquiera (no importa para 7m)
            Accion accionAnterior = new Accion();
            accionAnterior.setIdAccion(1);
            accionAnterior.setCambioPosesion(true); // No importa para 7m
            accionAnterior.setEvento(Evento.Gol);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior));
            
            AccionDTO accion = crearAccionBase();
            accion.setOrigenAccion(OrigenAccion._7m); // Exento de reglas secuenciales
            accion.setDetalleFinalizacion(DetalleFinalizacion._7m);
            accion.setTipoAtaque(TipoAtaque.Posicional);
            accion.setEvento(Evento.Gol);
            accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion));
            System.out.println("‚úÖ 7m correctamente exento de reglas secuenciales");
        }
    }
    
    /**
     * CASOS EDGE Y COMBINACIONES COMPLEJAS
     */
    @Nested
    @DisplayName("üé≠ CASOS EDGE Y COMBINACIONES COMPLEJAS")
    class CasosEdgeYCombinacionesComplejas {
        
        @Test
        @DisplayName("üéØ Flujo completo: Secuencia realista de acciones")
        void test_flujo_completo_secuencia_realista() {
            System.out.println("\nüéØ TEST: Flujo completo de secuencia realista");
            
            // ACCI√ìN 1: Inicio de partido (Juego_Continuado)
            System.out.println("   üìå Acci√≥n 1: Inicio de posesi√≥n");
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.empty());
            
            AccionDTO accion1 = crearAccionBase();
            accion1.setOrigenAccion(OrigenAccion.Juego_Continuado);
            accion1.setEvento(Evento.Lanzamiento_Parado);
            accion1.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion1.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion1.setDetalleEvento(DetalleEvento.Parada_Portero);
            accion1.setCambioPosesion(false);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion1));
            System.out.println("   ‚úÖ Acci√≥n 1 v√°lida");
            
            // ACCI√ìN 2: Rebote directo (despu√©s de parada)
            System.out.println("   üìå Acci√≥n 2: Rebote directo");
            Accion accionAnterior1 = new Accion();
            accionAnterior1.setCambioPosesion(false);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior1));
            
            AccionDTO accion2 = crearAccionBase();
            accion2.setOrigenAccion(OrigenAccion.Rebote_directo);
            accion2.setEvento(Evento.Gol);
            accion2.setDetalleFinalizacion(DetalleFinalizacion.Pivote);
            accion2.setZonaLanzamiento(ZonaLanzamiento.Centro);
            accion2.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion2));
            System.out.println("   ‚úÖ Acci√≥n 2 v√°lida");
            
            // ACCI√ìN 3: Nueva posesi√≥n (Juego_Continuado tras gol)
            System.out.println("   üìå Acci√≥n 3: Nueva posesi√≥n tras gol");
            Accion accionAnterior2 = new Accion();
            accionAnterior2.setCambioPosesion(true);
            when(accionRepository.findLastActionInMatch(anyInt())).thenReturn(Optional.of(accionAnterior2));
            
            AccionDTO accion3 = crearAccionBase();
            accion3.setOrigenAccion(OrigenAccion.Juego_Continuado);
            accion3.setTipoAtaque(TipoAtaque.Contraataque);
            accion3.setEvento(Evento.Gol);
            accion3.setDetalleFinalizacion(DetalleFinalizacion.Contragol);
            accion3.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
            accion3.setCambioPosesion(true);
            
            assertDoesNotThrow(() -> accionService.crearAccion(accion3));
            System.out.println("   ‚úÖ Acci√≥n 3 v√°lida");
            
            System.out.println("üéâ Flujo completo de secuencia realista exitoso");
        }
        
        @Test
        @DisplayName("üéØ Todos los tipos de DetalleEvento para Perdida")
        void test_todos_detalle_evento_perdida() {
            System.out.println("\nüéØ TEST: Todos los tipos de DetalleEvento para Perdida");
            
            DetalleEvento[] detallesValidos = {
                DetalleEvento.Pasos, DetalleEvento.Dobles, DetalleEvento.FaltaAtaque,
                DetalleEvento.Pasivo, DetalleEvento.InvasionArea, DetalleEvento.Robo,
                DetalleEvento.Pie, DetalleEvento.BalonFuera
            };
            
            for (DetalleEvento detalle : detallesValidos) {
                System.out.println("   üîç Probando " + detalle);
                
                AccionDTO accion = crearAccionBase();
                accion.setEvento(Evento.Perdida);
                accion.setDetalleFinalizacion(null);
                accion.setZonaLanzamiento(null);
                accion.setDetalleEvento(detalle);
                accion.setCambioPosesion(true);
                
                assertDoesNotThrow(() -> accionService.crearAccion(accion));
                System.out.println("   ‚úÖ " + detalle + " v√°lido");
            }
            
            System.out.println("üéâ Todos los DetalleEvento para Perdida son v√°lidos");
        }
        
        @Test
        @DisplayName("üéØ Todas las combinaciones de DetalleFinalizacion con TipoAtaque")
        void test_todas_combinaciones_detalle_finalizacion_tipo_ataque() {
            System.out.println("\nüéØ TEST: Combinaciones DetalleFinalizacion con TipoAtaque");
            
            // Combinaciones v√°lidas para Contraataque
            DetalleFinalizacion[] contraataqueValidos = {
                DetalleFinalizacion.Contragol, DetalleFinalizacion._1a_oleada,
                DetalleFinalizacion._2a_oleada, DetalleFinalizacion._3a_oleada
            };
            
            for (DetalleFinalizacion detalle : contraataqueValidos) {
                System.out.println("   üîç Contraataque + " + detalle);
                
                AccionDTO accion = crearAccionBase();
                accion.setTipoAtaque(TipoAtaque.Contraataque);
                accion.setDetalleFinalizacion(detalle);
                accion.setEvento(Evento.Gol);
                accion.setZonaLanzamiento(ZonaLanzamiento.Izquierda);
                accion.setCambioPosesion(true);
                
                assertDoesNotThrow(() -> accionService.crearAccion(accion));
                System.out.println("   ‚úÖ Contraataque + " + detalle + " v√°lido");
            }
            
            // Combinaciones v√°lidas para Posicional
            DetalleFinalizacion[] posicionalValidos = {
                DetalleFinalizacion.Lanzamiento_Exterior, DetalleFinalizacion.Pivote,
                DetalleFinalizacion.Penetracion, DetalleFinalizacion.Extremos,
                DetalleFinalizacion._7m
            };
            
            for (DetalleFinalizacion detalle : posicionalValidos) {
                System.out.println("   üîç Posicional + " + detalle);
                
                AccionDTO accion = crearAccionBase();
                accion.setTipoAtaque(TipoAtaque.Posicional);
                accion.setDetalleFinalizacion(detalle);
                if (detalle == DetalleFinalizacion._7m) {
                    accion.setOrigenAccion(OrigenAccion._7m);
                }
                accion.setEvento(Evento.Gol);
                accion.setZonaLanzamiento(ZonaLanzamiento.Centro);
                accion.setCambioPosesion(true);
                
                assertDoesNotThrow(() -> accionService.crearAccion(accion));
                System.out.println("   ‚úÖ Posicional + " + detalle + " v√°lido");
            }
            
            System.out.println("üéâ Todas las combinaciones v√°lidas pasaron");
        }
    }
    
    // M√âTODO AUXILIAR PARA CREAR ACCI√ìN BASE
    private AccionDTO crearAccionBase() {
        AccionDTO accion = new AccionDTO();
        accion.setIdPartido(1);
        accion.setIdPosesion(1);
        accion.setEquipoAccion(EquipoAccion.LOCAL);
        accion.setTipoAtaque(TipoAtaque.Posicional);
        accion.setOrigenAccion(OrigenAccion.Juego_Continuado);
        return accion;
    }
}